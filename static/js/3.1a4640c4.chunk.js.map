{"version":3,"sources":["validation/loginFormValidationRules.js","components/BookFormAdding.js"],"names":["loginFormValidationRules","title","fragment","errors","loginFormValidationRulesPath","text","BookFormAdding","books","setBooks","useState","setTitle","setFragment","users","url","onSubmit","event","preventDefault","message","alert","apiFetch","options","htmlFor","value","id","type","onChange","target"],"mappings":"qGAAA,oEAAO,IAAMA,EAA2B,SAACC,EAAOC,GAC5C,IAAIC,EAAS,GAIb,OAHKF,GAAUC,IACXC,EAAOF,MAAQ,4BAEZE,GAGEC,EAA+B,SAACC,GACzC,IAAIF,EAAS,GAIb,OAHKE,IACDF,EAAOE,KAAO,yBAEXF,I,yFCoCIG,UA3CQ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAElBC,mBAAS,IAFS,mBAErCR,EAFqC,KAE9BS,EAF8B,OAGZD,mBAAS,IAHG,mBAGrCP,EAHqC,KAG3BS,EAH2B,KAKrCC,EALqC,YAK5BC,IAL4B,MA0B5C,OACI,mCACI,uBAAMC,SArBO,SAACC,GAElB,GADAA,EAAMC,kBACDf,IAAUC,EAAU,CACrB,IAAMe,EAAUjB,YAAyBC,EAAOC,GAChD,OAAOgB,MAAM,GAAD,OAAID,EAAQhB,QAG5BkB,YAASP,EAAOJ,EAAUY,YAAQ,OAAQnB,EAAOC,GAAWK,IAcxD,UACI,uBAAOc,QAAQ,QAAf,0BACA,uBAAOC,MAAOrB,EAAOsB,GAAG,QAAQC,KAAK,OAAOC,SAZ9B,SAACV,GACvBL,EAASK,EAAMW,OAAOJ,UAYd,uBAAOD,QAAQ,WAAf,kCACA,uBAAOC,MAAOpB,EAAUqB,GAAG,WAAWC,KAAK,OAAOC,SAVjC,SAACV,GAC1BJ,EAAYI,EAAMW,OAAOJ,UAUjB","file":"static/js/3.1a4640c4.chunk.js","sourcesContent":["export const loginFormValidationRules = (title, fragment) => {\r\n    let errors = []\r\n    if (!title || !fragment) {\r\n        errors.title = \"this inputs are required\"\r\n    }\r\n    return errors\r\n};\r\n\r\nexport const loginFormValidationRulesPath = (text) => {\r\n    let errors = []\r\n    if (!text) {\r\n        errors.text = \"this text is required\"\r\n    }\r\n    return errors\r\n};\r\n","import React, { useState } from 'react';\r\nimport { url, options } from \"../fetchApi/utilities\";\r\nimport { loginFormValidationRules } from \"../validation/loginFormValidationRules\";\r\nimport { apiFetch } from \"../fetchApi/fetch\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BookFormAdding = ({ books, setBooks }) => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [fragment, setFragment] = useState('');\r\n\r\n    const [users] = url;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if (!title && !fragment) {\r\n            const message = loginFormValidationRules(title, fragment)\r\n            return alert(`${message.title}`)\r\n        };\r\n\r\n        apiFetch(users, setBooks, options(\"POST\", title, fragment), books)\r\n\r\n    };\r\n\r\n    const handleChangeTitle = (event) => {\r\n        setTitle(event.target.value)\r\n    };\r\n\r\n    const handleChangeFragment = (event) => {\r\n        setFragment(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"title\">Books' title</label>\r\n                <input value={title} id=\"title\" type=\"text\" onChange={handleChangeTitle} />\r\n                <label htmlFor=\"fragment\">Fragment of the book</label>\r\n                <input value={fragment} id=\"fragment\" type=\"text\" onChange={handleChangeFragment} />\r\n                <button>adding a book to the list</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nBookFormAdding.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default BookFormAdding;"],"sourceRoot":""}