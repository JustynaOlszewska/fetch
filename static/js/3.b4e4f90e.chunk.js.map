{"version":3,"sources":["validation/loginFormValidationRules.js","components/BookFormAdding.js"],"names":["loginFormValidationRules","title","fragment","errors","loginFormValidationRulesPath","text","BookFormAdding","books","setBooks","match","useRouteMatch","console","log","useState","setTitle","setFragment","onSubmit","event","preventDefault","map","item","id","message","alert","apiFetch","options","htmlFor","value","type","onChange","target"],"mappings":"qGAAA,oEAAO,IAAMA,EAA2B,SAACC,EAAOC,GAC5C,IAAIC,EAAS,GAIb,OAHKF,GAAUC,IACXC,EAAOF,MAAQ,4BAEZE,GAGEC,EAA+B,SAACC,GACzC,IAAIF,EAAS,GAIb,OAHKE,IACDF,EAAOE,KAAO,yBAEXF,I,gGCyCIG,UA/CQ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzBC,EAAQC,cACZC,QAAQC,IAAI,IAAKH,GAF2B,MAGlBI,mBAAS,IAHS,mBAGrCZ,EAHqC,KAG9Ba,EAH8B,OAIZD,mBAAS,IAJG,mBAIrCX,EAJqC,KAI3Ba,EAJ2B,KA6B5C,OACI,mCAEI,uBAAMC,SA1BO,SAACC,GAMlB,GAJAA,EAAMC,iBAENX,EAAMY,KAAI,SAAAC,GAAI,OAAIA,EAAKC,IAAM,MAExBpB,IAAUC,EAAU,CACrB,IAAMoB,EAAUtB,YAAyBC,EAAOC,GAChD,OAAOqB,MAAM,GAAD,OAAID,EAAQrB,QAG5BuB,YAAShB,EAAUiB,YAAQ,OAAQxB,EAAOC,GAAWK,IAejD,UACI,uBAAOmB,QAAQ,QAAf,0BACA,uBAAOC,MAAO1B,EAAOoB,GAAG,QAAQO,KAAK,OAAOC,SAb9B,SAACZ,GACvBH,EAASG,EAAMa,OAAOH,UAad,uBAAOD,QAAQ,WAAf,kCACA,uBAAOC,MAAOzB,EAAUmB,GAAG,WAAWO,KAAK,OAAOC,SAXjC,SAACZ,GAC1BF,EAAYE,EAAMa,OAAOH,UAWjB","file":"static/js/3.b4e4f90e.chunk.js","sourcesContent":["export const loginFormValidationRules = (title, fragment) => {\r\n    let errors = []\r\n    if (!title || !fragment) {\r\n        errors.title = \"this inputs are required\"\r\n    }\r\n    return errors\r\n};\r\n\r\nexport const loginFormValidationRulesPath = (text) => {\r\n    let errors = []\r\n    if (!text) {\r\n        errors.text = \"this text is required\"\r\n    }\r\n    return errors\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { options } from \"../fetchApi/utilities\";\r\nimport { loginFormValidationRules } from \"../validation/loginFormValidationRules\";\r\nimport { apiFetch } from \"../fetchApi/fetch\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BookFormAdding = ({ books, setBooks }) => {\r\n    let match = useRouteMatch();\r\n    console.log('s', match)\r\n    const [title, setTitle] = useState('');\r\n    const [fragment, setFragment] = useState('');\r\n\r\n    const handleSubmit = (event) => {\r\n\r\n        event.preventDefault()\r\n\r\n        books.map(item => item.id += 1)\r\n\r\n        if (!title && !fragment) {\r\n            const message = loginFormValidationRules(title, fragment)\r\n            return alert(`${message.title}`)\r\n        };\r\n\r\n        apiFetch(setBooks, options(\"POST\", title, fragment), books)\r\n\r\n    };\r\n\r\n    const handleChangeTitle = (event) => {\r\n        setTitle(event.target.value)\r\n    };\r\n\r\n    const handleChangeFragment = (event) => {\r\n        setFragment(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"title\">Books' title</label>\r\n                <input value={title} id=\"title\" type=\"text\" onChange={handleChangeTitle} />\r\n                <label htmlFor=\"fragment\">Fragment of the book</label>\r\n                <input value={fragment} id=\"fragment\" type=\"text\" onChange={handleChangeFragment} />\r\n                <button>adding a book to the list</button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nBookFormAdding.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default BookFormAdding;"],"sourceRoot":""}